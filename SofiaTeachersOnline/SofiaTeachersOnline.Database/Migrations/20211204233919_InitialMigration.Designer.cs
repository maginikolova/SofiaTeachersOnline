// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SofiaTeachersOnline.Database;

namespace SofiaTeachersOnline.Database.Migrations
{
    [DbContext(typeof(SofiaTeachersOnlineDbContext))]
    [Migration("20211204233919_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 136, DateTimeKind.Utc).AddTicks(9162),
                            IsDeleted = false,
                            TeacherId = new Guid("71c88bb4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Title = "10-те най-чести грешки в английския"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(628),
                            IsDeleted = false,
                            TeacherId = new Guid("71c88cc4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Title = "Общ английски"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(675),
                            IsDeleted = false,
                            TeacherId = new Guid("71c88cc4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Title = "Бизнес Английски"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(681),
                            IsDeleted = false,
                            TeacherId = new Guid("71c88cc4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Title = "Подготовка за сертификат"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(684),
                            IsDeleted = false,
                            TeacherId = new Guid("71c88cc4-b6b6-45e8-9ea1-ba1912c1a845"),
                            Title = "Български за чужденци"
                        });
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.CourseProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Progress")
                        .HasColumnType("real");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseProgresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(2028),
                            IsDeleted = false,
                            Progress = 10f,
                            StudentId = new Guid("1d6e3bae-451f-4201-8b43-cecc2d404270")
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(3263),
                            IsDeleted = false,
                            Progress = 20f,
                            StudentId = new Guid("71c88aa4-b6b6-45e8-0ea1-ba1912c1a845")
                        });
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "some content",
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(4344),
                            IsDeleted = false,
                            LessonId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "some content2",
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(5340),
                            IsDeleted = false,
                            LessonId = 2
                        });
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.GeneratedLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("SalesAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalesAgentId");

                    b.ToTable("GeneratedLink");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("Mark")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(6343),
                            ExerciseId = 2,
                            IsDeleted = false,
                            Mark = (byte)4,
                            StudentId = new Guid("1d6e3bae-451f-4201-8b43-cecc2d404270"),
                            TeacherId = new Guid("71c88bb4-b6b6-45e8-9ea1-ba1912c1a845")
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(7886),
                            ExerciseId = 1,
                            IsDeleted = false,
                            Mark = (byte)6,
                            StudentId = new Guid("1d6e3bae-451f-4201-8b43-cecc2d404270"),
                            TeacherId = new Guid("71c88bb4-b6b6-45e8-9ea1-ba1912c1a845")
                        });
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLesson")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "some content",
                            CourseId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 137, DateTimeKind.Utc).AddTicks(9121),
                            IsDeleted = false,
                            Name = "some name",
                            NumberOfLesson = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "some content 2",
                            CourseId = 1,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 138, DateTimeKind.Utc).AddTicks(1682),
                            IsDeleted = false,
                            Name = "some name 2",
                            NumberOfLesson = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "some content 3",
                            CourseId = 2,
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 138, DateTimeKind.Utc).AddTicks(1795),
                            IsDeleted = false,
                            Name = "some name 3",
                            NumberOfLesson = 1
                        });
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Notebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Notebooks");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GivenById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GivenToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GivenById");

                    b.HasIndex("GivenToId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.WannaBeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WannaBeUsers");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.SalesAgent", b =>
                {
                    b.HasBaseType("SofiaTeachersOnline.Database.Models.AppUser");

                    b.Property<int>("NumberOfSales")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SalesAgent");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Student", b =>
                {
                    b.HasBaseType("SofiaTeachersOnline.Database.Models.AppUser");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d6e3bae-451f-4201-8b43-cecc2d404270"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e6b5bb5a-301e-4c12-b553-ab29d69d0526",
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 52, DateTimeKind.Utc).AddTicks(4694),
                            Email = "magi@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LastOnline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGI@MAIL.COM",
                            NormalizedUserName = "MAGI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKjxKKklEp3SYnikvNou0d4Wms2MWsvJaEx0BKh+FnPXiQZit6vgykbrs/Dc5JoSZg==",
                            PhoneNumber = "0886868686",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9862b470-e170-4846-bb9d-6c65925a5f27",
                            TwoFactorEnabled = false,
                            UserName = "magi@mail.com"
                        },
                        new
                        {
                            Id = new Guid("71c88aa4-b6b6-45e8-0ea1-ba1912c1a845"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a9625c49-4088-41a1-8b81-0e72cb281b79",
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 53, DateTimeKind.Utc).AddTicks(5127),
                            Email = "phresli@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LastOnline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "PHRESLI@MAIL.COM",
                            NormalizedUserName = "PHRESLI@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPMLhmprLFyLB9592BIYIkLk+vzZDwzU3g/Dq/RNctpkAlIRekDMbjTQrPdnRqCWZA==",
                            PhoneNumber = "0886868688",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba21bc05-2e1e-4d5a-b10c-35e26472ca53",
                            TwoFactorEnabled = false,
                            UserName = "phresli@mail.com"
                        });
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Teacher", b =>
                {
                    b.HasBaseType("SofiaTeachersOnline.Database.Models.AppUser");

                    b.HasDiscriminator().HasValue("Teacher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71c88bb4-b6b6-45e8-9ea1-ba1912c1a845"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "906d641b-1150-42a4-bc7c-d458f8e3f956",
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 94, DateTimeKind.Utc).AddTicks(9276),
                            Email = "magin@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LastOnline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGINMAIL@MAIL.COM",
                            NormalizedUserName = "MAGIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEkEju6i2ZZrrxR06MZVzxKMhxQgMXw7YZBBGdTJdwpNXsHiFdqqMQIKs60WVvzZ6A==",
                            PhoneNumber = "0889868686",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04f35009-ab48-4286-ad5a-33d8b520daab",
                            TwoFactorEnabled = false,
                            UserName = "magin@mail.com"
                        },
                        new
                        {
                            Id = new Guid("71c88cc4-b6b6-45e8-9ea1-ba1912c1a845"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "efc9feec-ec80-48c6-8acf-9109ee87d2be",
                            CreatedOn = new DateTime(2021, 12, 4, 23, 39, 19, 94, DateTimeKind.Utc).AddTicks(9405),
                            Email = "phreslip@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LastOnline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "PHRESLIP@MAIL.COM",
                            NormalizedUserName = "PHRESLIP@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENVO7c0gMqKjoikbpBFrSZ7NQru/41Rs8kDx8Uc4nveWxfIV4P48MNSOuX82ooRcnA==",
                            PhoneNumber = "0812868688",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4fdfdcc-087b-4a61-9a32-fcb0a2165318",
                            TwoFactorEnabled = false,
                            UserName = "phreslip@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.AppUser", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Course", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", "ModifiedByUser")
                        .WithMany("ModifiedCourses")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SofiaTeachersOnline.Database.Models.Student", null)
                        .WithMany("Courses")
                        .HasForeignKey("StudentId");

                    b.HasOne("SofiaTeachersOnline.Database.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.CourseProgress", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.Course", "Course")
                        .WithMany("CourseProgress")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SofiaTeachersOnline.Database.Models.Student", "Student")
                        .WithMany("CourseProgress")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Exercise", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.Lesson", "Lesson")
                        .WithMany("Exercises")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", "ModifiedByUser")
                        .WithMany("ModifiedExercises")
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.GeneratedLink", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.SalesAgent", null)
                        .WithMany("GeneratedLinks")
                        .HasForeignKey("SalesAgentId");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Grade", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.Exercise", "Exercise")
                        .WithMany("Grades")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("SofiaTeachersOnline.Database.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SofiaTeachersOnline.Database.Models.Teacher", "Teacher")
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Lesson", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Notebook", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("SofiaTeachersOnline.Database.Models.Student", "Student")
                        .WithOne("Notebook")
                        .HasForeignKey("SofiaTeachersOnline.Database.Models.Notebook", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Rating", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.Student", "GivenBy")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("GivenById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SofiaTeachersOnline.Database.Models.Teacher", "GivenTo")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("GivenToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Video", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.Lesson", "Lesson")
                        .WithMany("Videos")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SofiaTeachersOnline.Database.Models.AppUser", "ModifiedByUser")
                        .WithMany("ModifiedVideos")
                        .HasForeignKey("ModifiedByUserId");
                });

            modelBuilder.Entity("SofiaTeachersOnline.Database.Models.Student", b =>
                {
                    b.HasOne("SofiaTeachersOnline.Database.Models.Course", null)
                        .WithMany("Students")
                        .HasForeignKey("CourseId");
                });
#pragma warning restore 612, 618
        }
    }
}
